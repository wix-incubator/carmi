// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`carmi-react 1`] = `
"
// @carmi
import carmi from './macro'
const { root } = require('../../index');
const {createElement} = require('../../jsx');
const todosList = <div>{root.get(0)}</div>;
module.exports = {todosList};

      ↓ ↓ ↓ ↓ ↓ ↓

module.exports = function () {
  'use strict';
  function model($model, $funcLib) {
    const $res = { $model };const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $parentObjectMap = new WeakMap();const $parentKeyMap = new WeakMap();const $invalidatedRoots = new Set();let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const $uniquePersistentObjects = new Map();const getUniquePersistenObject = id => {
      if (!$uniquePersistentObjects.has(id)) {
        $uniquePersistentObjects.set(id, {});
      }return $uniquePersistentObjects.get(id);
    };const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($parentObjectMap.has($targetKeySet)) {
        invalidate($parentObjectMap.get($targetKeySet), $parentKeyMap.get($targetKeySet));
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === \\"object\\" && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === \\"object\\" && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function setOnArray($target, $key, $val, $invalidates) {
      let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === \\"object\\" && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $target[$key] === \\"object\\" && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }const $arrayCache = new WeakMap();function getEmptyArray($invalidatedKeys, key, token) {
      if (!$arrayCache.has($invalidatedKeys)) {
        $arrayCache.set($invalidatedKeys, {});
      }const $cacheByKey = $arrayCache.get($invalidatedKeys);$cacheByKey[key] = $cacheByKey[key] || new Map();if (!$cacheByKey[key].has(token)) {
        $cacheByKey[key].set(token, []);
      }return $cacheByKey[key].get(token);
    }const $objectCache = new WeakMap();function getEmptyObject($invalidatedKeys, key, token) {
      if (!$objectCache.has($invalidatedKeys)) {
        $objectCache.set($invalidatedKeys, {});
      }const $cacheByKey = $objectCache.get($invalidatedKeys);$cacheByKey[key] = $cacheByKey[key] || new Map();if (!$cacheByKey[key].has(token)) {
        $cacheByKey[key].set(token, {});
      }return $cacheByKey[key].get(token);
    }function array($invalidatedKeys, key, newVal, identifier, len, invalidates) {
      const res = getEmptyArray($invalidatedKeys, key, identifier);invalidates = invalidates && res.length === len;for (let i = 0; i < len; i++) {
        setOnArray(res, i, newVal[i], invalidates);
      }return res;
    }function object($invalidatedKeys, key, newVal, identifier, keysList, invalidates) {
      const res = getEmptyObject($invalidatedKeys, key, identifier);invalidates = invalidates && keysList.length && res.hasOwnProperty(keysList[0]);for (let i = 0; i < keysList.length; i++) {
        const name = keysList[i];setOnObject(res, name, newVal[name], invalidates);
      }return res;
    }const $callCache = new WeakMap();function call($invalidatedKeys, key, newVal, identifier, len, invalidates) {
      const arr = getEmptyArray($invalidatedKeys, key, identifier);invalidates = true;for (let i = 0; i < len; i++) {
        setOnArray(arr, i, newVal[i], invalidates);
      }if (!$callCache.has(arr) || $tainted.has(arr)) {
        $callCache.set(arr, $funcLib[arr[0]].apply($funcLib, arr.slice(1)));
      }return $callCache.get(arr);
    }$invalidatedRoots.add(\\"todosList\\");function $todosListBuild() {
      const key = \\"todosList\\";const $invalidatedKeys = $invalidatedRoots;const newValue = call($invalidatedKeys, key, [\\"createElement\\", $res[\\"$object_temp_4_1\\"]], getUniquePersistenObject(6), 2, false);setOnObject($res, \\"todosList\\", newValue, false);$invalidatedRoots.delete(\\"todosList\\");return $res.todosList;
    }const object$2Token = getUniquePersistenObject(2);const object$2Args = [\\"type\\", \\"props\\", \\"children\\"];$invalidatedRoots.add(\\"$object_temp_4_1\\");function $object_temp_4_1Build() {
      const key = \\"$object_temp_4_1\\";const $invalidatedKeys = $invalidatedRoots;const newValue = object($invalidatedKeys, key, { type: \\"div\\", props: null, children: $res[\\"$array_temp_4_0\\"] }, object$2Token, object$2Args, false);setOnObject($res, \\"$object_temp_4_1\\", newValue, false);$invalidatedRoots.delete(\\"$object_temp_4_1\\");return $res.$object_temp_4_1;
    }const array$4Token = getUniquePersistenObject(4);const array$4Args = 1;$invalidatedRoots.add(\\"$array_temp_4_0\\");function $array_temp_4_0Build() {
      const key = \\"$array_temp_4_0\\";const $invalidatedKeys = $invalidatedRoots;const newValue = array($invalidatedKeys, key, [$model[0]], array$4Token, array$4Args, false);setOnObject($res, \\"$array_temp_4_0\\", newValue, false);$invalidatedRoots.delete(\\"$array_temp_4_0\\");return $res.$array_temp_4_0;
    }let $inBatch = false;function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has(\\"$array_temp_4_0\\") && $array_temp_4_0Build();$invalidatedRoots.has(\\"$object_temp_4_1\\") && $object_temp_4_1Build();$invalidatedRoots.has(\\"todosList\\") && $todosListBuild();$tainted = new WeakSet();$listeners.forEach(callback => callback());
    }Object.assign($res, {}, { $startBatch: () => $inBatch = true, $endBatch: () => {
        $inBatch = false;recalculate();
      }, $runInBatch: func => {
        $inBatch = true;func();$inBatch = false;recalculate();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      } });recalculate();return $res;
  }return model;
}();
"
`;

exports[`magic-comment 1`] = `
"
// @carmi
import carmi from './macro'
const { root } = require('../../index');
module.exports = { first: root.get(0), second: root.get(1) };

      ↓ ↓ ↓ ↓ ↓ ↓

module.exports = function () {
  'use strict';
  function model($model, $funcLib) {
    const $res = { $model };const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $parentObjectMap = new WeakMap();const $parentKeyMap = new WeakMap();const $invalidatedRoots = new Set();let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($parentObjectMap.has($targetKeySet)) {
        invalidate($parentObjectMap.get($targetKeySet), $parentKeyMap.get($targetKeySet));
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === \\"object\\" && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === \\"object\\" && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }$invalidatedRoots.add(\\"first\\");function $firstBuild() {
      const newValue = $model[0];setOnObject($res, \\"first\\", newValue, false);$invalidatedRoots.delete(\\"first\\");return $res.first;
    }$invalidatedRoots.add(\\"second\\");function $secondBuild() {
      const newValue = $model[1];setOnObject($res, \\"second\\", newValue, false);$invalidatedRoots.delete(\\"second\\");return $res.second;
    }let $inBatch = false;function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has(\\"first\\") && $firstBuild();$invalidatedRoots.has(\\"second\\") && $secondBuild();$tainted = new WeakSet();$listeners.forEach(callback => callback());
    }Object.assign($res, {}, { $startBatch: () => $inBatch = true, $endBatch: () => {
        $inBatch = false;recalculate();
      }, $runInBatch: func => {
        $inBatch = true;func();$inBatch = false;recalculate();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      } });recalculate();return $res;
  }return model;
}();
"
`;

exports[`template-literal 1`] = `
"
const carmi = require('./macro')

const modelBuilder = carmi\`
  const {root} = require('../..')
  module.exports = {all: root.get('list'), first: root.get('list').get(0)}
\`

      ↓ ↓ ↓ ↓ ↓ ↓

const modelBuilder = (function () {
  'use strict';
  function model($model, $funcLib) {
    const $res = { $model };const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $parentObjectMap = new WeakMap();const $parentKeyMap = new WeakMap();const $invalidatedRoots = new Set();let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($parentObjectMap.has($targetKeySet)) {
        invalidate($parentObjectMap.get($targetKeySet), $parentKeyMap.get($targetKeySet));
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === \\"object\\" && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === \\"object\\" && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }$invalidatedRoots.add(\\"all\\");function $allBuild() {
      const newValue = $model[\\"list\\"];setOnObject($res, \\"all\\", newValue, false);$invalidatedRoots.delete(\\"all\\");return $res.all;
    }$invalidatedRoots.add(\\"first\\");function $firstBuild() {
      const newValue = $res[\\"all\\"][0];setOnObject($res, \\"first\\", newValue, false);$invalidatedRoots.delete(\\"first\\");return $res.first;
    }let $inBatch = false;function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has(\\"all\\") && $allBuild();$invalidatedRoots.has(\\"first\\") && $firstBuild();$tainted = new WeakSet();$listeners.forEach(callback => callback());
    }Object.assign($res, {}, { $startBatch: () => $inBatch = true, $endBatch: () => {
        $inBatch = false;recalculate();
      }, $runInBatch: func => {
        $inBatch = true;func();$inBatch = false;recalculate();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      } });recalculate();return $res;
  }return model;
})();
"
`;
