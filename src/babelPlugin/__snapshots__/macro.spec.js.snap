// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros carmi-react: carmi-react 1`] = `
"
// @carmi
import carmi from './macro'
const { root } = require('../../index');
const {createElement} = require('../../jsx');
const todosList = <div>{root.get(0)}</div>;
module.exports = {todosList};

      ↓ ↓ ↓ ↓ ↓ ↓

module.exports = function () {
  'use strict';
  function model($model, $funcLib, $batchingStrategy) {
    const $res = { $model };
    const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $parentObjectMap = new WeakMap();const $parentKeyMap = new WeakMap();const $invalidatedRoots = new Set();let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const $uniquePersistentObjects = new Map();const getUniquePersistenObject = id => {
      if (!$uniquePersistentObjects.has(id)) {
        $uniquePersistentObjects.set(id, {});
      }return $uniquePersistentObjects.get(id);
    };const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($parentObjectMap.has($targetKeySet)) {
        invalidate($parentObjectMap.get($targetKeySet), $parentKeyMap.get($targetKeySet));
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function setOnArray($target, $key, $val, $invalidates) {
      let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $target[$key] === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }const $arrayCache = new WeakMap();function getEmptyArray($invalidatedKeys, key, token) {
      if (!$arrayCache.has($invalidatedKeys)) {
        $arrayCache.set($invalidatedKeys, {});
      }const $cacheByKey = $arrayCache.get($invalidatedKeys);$cacheByKey[key] = $cacheByKey[key] || new Map();if (!$cacheByKey[key].has(token)) {
        $cacheByKey[key].set(token, []);
      }return $cacheByKey[key].get(token);
    }function array($invalidatedKeys, key, newVal, identifier, len, invalidates) {
      const res = getEmptyArray($invalidatedKeys, key, identifier);invalidates = invalidates && res.length === len;for (let i = 0; i < len; i++) {
        setOnArray(res, i, newVal[i], invalidates);
      }return res;
    }const $callCache = new WeakMap();function call($invalidatedKeys, key, newVal, identifier, len, invalidates) {
      const arr = getEmptyArray($invalidatedKeys, key, identifier);invalidates = true;for (let i = 0; i < len; i++) {
        setOnArray(arr, i, newVal[i], invalidates);
      }if (!$callCache.has(arr) || $tainted.has(arr)) {
        $callCache.set(arr, $funcLib[arr[0]].apply($res, arr.slice(1)));
      }return $callCache.get(arr);
    }$invalidatedRoots.add('todosList');function $todosListBuild() {
      const key = 'todosList';const $invalidatedKeys = $invalidatedRoots;const newValue = call($invalidatedKeys, key, [\\"createElement\\", $res[\\"$array_temp_4_19_0\\"]], getUniquePersistenObject(4), 2, true);setOnObject($res, 'todosList', newValue, true);$invalidatedRoots.delete('todosList');return $res.todosList;
    }const array$2Token = getUniquePersistenObject(2);const array$2Args = 3;$invalidatedRoots.add('$array_temp_4_19_0');function $array_temp_4_19_0Build() {
      const key = '$array_temp_4_19_0';const $invalidatedKeys = $invalidatedRoots;const newValue = array($invalidatedKeys, key, [\\"div\\", null, $model[0]], array$2Token, array$2Args, false);setOnObject($res, '$array_temp_4_19_0', newValue, false);$invalidatedRoots.delete('$array_temp_4_19_0');return $res.$array_temp_4_19_0;
    }let $inBatch = false;let $batchPending = [];function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has('$array_temp_4_19_0') && $array_temp_4_19_0Build();$invalidatedRoots.has('todosList') && $todosListBuild();$tainted = new WeakSet();$listeners.forEach(callback => callback());if ($batchPending.length) {
        $res.$endBatch();
      }
    }Object.assign($res, {}, { $startBatch: () => $inBatch = true, $endBatch: () => {
        $inBatch = false;if ($batchPending.length) {
          $batchPending.forEach(({ func, args }) => {
            func.apply($res, args);
          });$batchPending = [];recalculate();
        }
      }, $runInBatch: func => {
        $res.$startBatch();func();$res.$endBatch();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      } });recalculate();return $res;
  }return model;
}();
"
`;

exports[`macros magic-comment: magic-comment 1`] = `
"
// @carmi
import carmi from './macro'
const { root } = require('../../index');
module.exports = { first: root.get(0), second: root.get(1) };

      ↓ ↓ ↓ ↓ ↓ ↓

module.exports = function () {
  'use strict';
  function model($model, $funcLib, $batchingStrategy) {
    const $res = { $model };const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $parentObjectMap = new WeakMap();const $parentKeyMap = new WeakMap();const $invalidatedRoots = new Set();let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($parentObjectMap.has($targetKeySet)) {
        invalidate($parentObjectMap.get($targetKeySet), $parentKeyMap.get($targetKeySet));
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }$invalidatedRoots.add('first');function $firstBuild() {
      const newValue = $model[0];setOnObject($res, 'first', newValue, true);$invalidatedRoots.delete('first');return $res.first;
    }$invalidatedRoots.add('second');function $secondBuild() {
      const newValue = $model[1];setOnObject($res, 'second', newValue, true);$invalidatedRoots.delete('second');return $res.second;
    }let $inBatch = false;let $batchPending = [];function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has('first') && $firstBuild();$invalidatedRoots.has('second') && $secondBuild();$tainted = new WeakSet();$listeners.forEach(callback => callback());if ($batchPending.length) {
        $res.$endBatch();
      }
    }Object.assign($res, {}, { $startBatch: () => $inBatch = true, $endBatch: () => {
        $inBatch = false;if ($batchPending.length) {
          $batchPending.forEach(({ func, args }) => {
            func.apply($res, args);
          });$batchPending = [];recalculate();
        }
      }, $runInBatch: func => {
        $res.$startBatch();func();$res.$endBatch();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      } });recalculate();return $res;
  }return model;
}();
"
`;

exports[`macros template-literal: template-literal 1`] = `
"
const carmi = require('./macro')

const modelBuilder = carmi\`
  const {root} = require('../..')
  module.exports = {all: root.get('list'), first: root.get('list').get(0)}
\`

      ↓ ↓ ↓ ↓ ↓ ↓

const modelBuilder = (function () {
  'use strict';
  function model($model, $funcLib, $batchingStrategy) {
    const $res = { $model };const $listeners = new Set();const $trackingMap = new WeakMap();const $trackedMap = new WeakMap();const $trackingWildcards = new WeakMap();const $invalidatedMap = new WeakMap();const $parentObjectMap = new WeakMap();const $parentKeyMap = new WeakMap();const $invalidatedRoots = new Set();let $tainted = new WeakSet();$invalidatedMap.set($res, $invalidatedRoots);const untrack = ($targetKeySet, $targetKey) => {
      const $tracked = $trackedMap.get($targetKeySet);if (!$tracked || !$tracked[$targetKey]) {
        return;
      }$tracked[$targetKey].forEach(({ $sourceObj, $sourceKey, $target }) => {
        const $trackingSource = $trackingMap.get($sourceObj);$trackingSource[$sourceKey].delete($target);
      });delete $tracked[$targetKey];
    };const invalidate = ($targetKeySet, $targetKey) => {
      if ($targetKeySet.has($targetKey)) {
        return;
      }$targetKeySet.add($targetKey);untrack($targetKeySet, $targetKey);if ($parentObjectMap.has($targetKeySet)) {
        invalidate($parentObjectMap.get($targetKeySet), $parentKeyMap.get($targetKeySet));
      }
    };function setOnObject($target, $key, $val, $invalidates) {
      let $changed = false;let $hard = false;if ($invalidates) {
        if (typeof $target[$key] === 'object' && $target[$key] && $target[$key] !== $val) {
          $hard = true;
        }if ($hard || $target[$key] !== $val || typeof $val === 'object' && $tainted.has($val) || !$target.hasOwnProperty($key) && $target[$key] === undefined) {
          $changed = true;triggerInvalidations($target, $key, $hard);
        }
      }$target[$key] = $val;return $changed;
    }function triggerInvalidations($sourceObj, $sourceKey, $hard) {
      $tainted.add($sourceObj);const $track = $trackingMap.get($sourceObj);if ($track && $track.hasOwnProperty($sourceKey)) {
        $track[$sourceKey].forEach(($soft, $target) => {
          if (!$soft || $hard) {
            invalidate($target[0], $target[1]);
          }
        });
      }if ($trackingWildcards.has($sourceObj)) {
        $trackingWildcards.get($sourceObj).forEach($targetInvalidatedKeys => {
          invalidate($targetInvalidatedKeys, $sourceKey);
        });
      }
    }$invalidatedRoots.add('all');function $allBuild() {
      const newValue = $model[\\"list\\"];setOnObject($res, 'all', newValue, true);$invalidatedRoots.delete('all');return $res.all;
    }$invalidatedRoots.add('first');function $firstBuild() {
      const newValue = $res[\\"all\\"][0];setOnObject($res, 'first', newValue, true);$invalidatedRoots.delete('first');return $res.first;
    }let $inBatch = false;let $batchPending = [];function recalculate() {
      if ($inBatch) {
        return;
      }$invalidatedRoots.has('all') && $allBuild();$invalidatedRoots.has('first') && $firstBuild();$tainted = new WeakSet();$listeners.forEach(callback => callback());if ($batchPending.length) {
        $res.$endBatch();
      }
    }Object.assign($res, {}, { $startBatch: () => $inBatch = true, $endBatch: () => {
        $inBatch = false;if ($batchPending.length) {
          $batchPending.forEach(({ func, args }) => {
            func.apply($res, args);
          });$batchPending = [];recalculate();
        }
      }, $runInBatch: func => {
        $res.$startBatch();func();$res.$endBatch();
      }, $addListener: func => {
        $listeners.add(func);
      }, $removeListener: func => {
        $listeners.delete(func);
      } });recalculate();return $res;
  }return model;
})();
"
`;
