#!/usr/bin/env node
'use strict';
const commandLineArgs = require('command-line-args');
const carmi = require('../index');
const path = require('path');
const { writeFile } = require('../src/promise-fs');

const optionDefinitions = [
  { name: 'source', type: String, defaultOption: true, description: 'source filename, which exports a carmi model' },
  { name: 'output', type: String, defaultValue: '', description: 'output filename' },
  {
    name: 'compiler',
    type: String,
    defaultValue: 'optimizing',
    description: 'compiler version to use naive/simple/optimizing'
  },
  { name: 'format', type: String, defaultValue: 'iife', description: 'output format - iife,cjs...' },
  { name: 'name', type: String, defaultValue: 'model', description: 'name of the output module/function' },
  { name: 'minify', type: Boolean, defaultValue: false, description: 'minify output' },
  { name: 'help', type: Boolean, defaultValue: false, description: 'shows this very help message and quits' },
  { name: 'ast', type: Boolean, defaultValue: false }
];

const HELP = `carmi [<options>] <src>
${optionDefinitions
  .filter(v => v.description)
  .map(opt => `--${opt.name} - ${opt.description}`)
  .join('\n')}
`;

async function run() {
  const options = commandLineArgs(optionDefinitions);
  if (options.help) {
    return console.log(HELP);
  }
  let model;
  const absPath = path.resolve(process.cwd(), options.source);
  try {
    model = require(absPath);
  } catch (e) {
    console.error(`failed to require ${options.source} ${e.stack}`);
    throw e;
    return;
  }
  const code = await carmi.compile(model, options);
  if (options.output) {
    await writeFile(options.output, code);
  } else {
    console.log(code);
  }
}

run();
