#!/usr/bin/env node

'use strict';

const commandLineArgs = require('command-line-args');
const carmi = require('../index');
const path = require('path');
const fs = require('fs-extra');
const processCarmi = require('../api')
const {CACHE_SCENARIOS} = require('../src/cache-scenarios')

const optionDefinitions = [
  {name: 'source', type: String, defaultOption: true, description: 'source filename, which exports a carmi model'},
  {name: 'output', type: String, defaultValue: '', description: 'output filename'},
  {name: 'cwd', type: String, defaultValue: process.cwd(), description: 'root directory for carmi files. Needed for babel config'},
  {
    name: 'compiler',
    type: String,
    defaultValue: 'optimizing',
    description: 'compiler version to use naive/simple/optimizing/bytecode'
  },
  {name: 'debug', type: Boolean, defaultValue: false, description: 'add debug functions to the generated code'},
  {name: 'type-check', type: Boolean, defaultValue: false, description: 'add static type checking to runtime code'},
  {name: 'format', type: String, defaultValue: 'iife', description: 'output format - iife,cjs... or binary'},
  {name: 'name', type: String, defaultValue: 'model', description: 'name of the output module/function'},
  {name: 'prettier', type: Boolean, defaultValue: false, description: 'run prettier on the output'},
  {name: 'no-cache', type: Boolean, defaultValue: false, description: 'ignore cache'},
  {name: 'cache-scenario', type: String, defaultValue: CACHE_SCENARIOS.mtime, description: `cache scenario to use (${Object.values(CACHE_SCENARIOS).join(' | ')})`},
  {name: 'no-coverage', type: Boolean, defaultValue: false, description: 'generate header to disable coverage'},
  {name: 'stats', type: String, defaultValue: '', description: 'generate stats file'},
  {name: 'help', type: Boolean, defaultValue: false, description: 'shows this very help message and quits'},
  {name: 'ast', type: Boolean, defaultValue: false}
];

const HELP = `carmi [<options>] <src>
${optionDefinitions
  .filter(v => v.description)
  .map(opt => `--${opt.name} - ${opt.description}`)
  .join('\n')}
`;

const options = commandLineArgs(optionDefinitions);

async function run() {
  if (options.help) {
    return console.log(HELP);
  }

  const absPath = path.resolve(process.cwd(), options.source);

  const {code} = processCarmi({...options, source: absPath})

  if (options.output) {
    await fs.outputFile(options.output, code);
  } else {
    console.log(code);
  }
}

run().catch(e => {
  console.log(`error ${e}`)
  process.exit(1)
});
